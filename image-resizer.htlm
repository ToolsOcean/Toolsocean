<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Resizer - Tools Ocean</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #0077ff;
            --primary-dark: #0066dd;
            --primary-light: #3399ff;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f0f8ff;
        }
        .btn-primary {
            background-color: var(--primary-color);
            transition: all 0.3s ease;
        }
        .btn-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
        }
        .header-gradient {
            background: linear-gradient(135deg, #0077ff 0%, #00a1ff 100%);
        }
        .main-container {
            max-width: 1200px;
        }
        .image-container {
            min-height: 200px;
            border: 2px dashed #ccc;
            transition: all 0.3s ease;
        }
        .image-container:hover, .image-container.active {
            border-color: var(--primary-color);
        }
        .preview-container {
            min-height: 200px;
        }
        .loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid var(--primary-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .social-icon {
            color: var(--primary-color);
            transition: all 0.3s ease;
        }
        .social-icon:hover {
            color: var(--primary-dark);
            transform: scale(1.2);
        }
    </style>
</head>
<body class="min-h-screen flex flex-col">
    <!-- Header -->
    <header class="header-gradient text-white p-4 shadow-lg">
        <div class="container mx-auto flex flex-col md:flex-row justify-between items-center">
            <h1 class="text-3xl font-bold mb-2 md:mb-0">Image Resizer</h1>
            <p class="text-sm md:text-base">Resize your images easily with custom dimensions</p>
        </div>
    </header>

    <!-- Main Content -->
    <main class="flex-grow container mx-auto px-4 py-8 main-container">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <!-- Image Upload Section -->
            <div class="mb-8">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Upload Image</h2>
                <div id="upload-container" class="image-container flex flex-col items-center justify-center p-6 rounded-lg cursor-pointer bg-gray-50">
                    <i class="fas fa-cloud-upload-alt text-5xl text-gray-400 mb-4"></i>
                    <p class="text-gray-500 text-center mb-2">Drag & drop an image or click to browse</p>
                    <p class="text-gray-400 text-sm">Supported formats: JPG, PNG, GIF, WebP</p>
                    <input type="file" id="file-input" class="hidden" accept="image/*">
                </div>
            </div>

            <!-- Resize Controls -->
            <div class="mb-8 grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Resize Options</h2>
                    <div class="space-y-4">
                        <div>
                            <label for="width" class="block text-gray-700 mb-1">Width (px)</label>
                            <input type="number" id="width" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400" placeholder="Enter width">
                        </div>
                        <div>
                            <label for="height" class="block text-gray-700 mb-1">Height (px)</label>
                            <input type="number" id="height" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400" placeholder="Enter height">
                        </div>
                        <div class="flex items-center">
                            <input type="checkbox" id="maintain-aspect" class="mr-2" checked>
                            <label for="maintain-aspect" class="text-gray-700">Maintain aspect ratio</label>
                        </div>
                        <button id="resize-btn" class="btn-primary text-white px-6 py-2 rounded-md disabled:opacity-50 disabled:cursor-not-allowed w-full" disabled>
                            Resize Image
                        </button>
                    </div>
                </div>

                <!-- Preview Section -->
                <div>
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Preview</h2>
                    <div id="preview-container" class="preview-container flex items-center justify-center bg-gray-50 rounded-lg p-4 border">
                        <p class="text-gray-400">Image preview will appear here</p>
                    </div>
                    <div class="mt-4 flex justify-between items-center">
                        <div>
                            <span id="image-info" class="text-sm text-gray-600"></span>
                        </div>
                        <button id="download-btn" class="btn-primary text-white px-6 py-2 rounded-md disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                            <i class="fas fa-download mr-2"></i>Download
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-white text-gray-800 p-6 shadow-inner">
        <div class="container mx-auto">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="mb-4 md:mb-0">
                    <p class="text-center md:text-left">
                        Created by <span class="font-semibold">MD Naeem Akhtar</span>
                    </p>
                    <div class="flex justify-center md:justify-start mt-2">
                        <a href="https://www.instagram.com/naeem_bhai_078" target="_blank" class="social-icon mr-4">
                            <i class="fab fa-instagram text-2xl"></i>
                            <span class="ml-1">@naeem_bhai_078</span>
                        </a>
                    </div>
                </div>
                <div class="text-center md:text-right">
                    <p class="text-sm">Â© 2023 All Rights Reserved by Tools Ocean</p>
                </div>
            </div>
        </div>
    </footer>

    <!-- Loading Overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white p-8 rounded-lg flex flex-col items-center">
            <div class="loader mb-4"></div>
            <p class="text-gray-700">Processing image...</p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM elements
            const uploadContainer = document.getElementById('upload-container');
            const fileInput = document.getElementById('file-input');
            const widthInput = document.getElementById('width');
            const heightInput = document.getElementById('height');
            const maintainAspect = document.getElementById('maintain-aspect');
            const resizeBtn = document.getElementById('resize-btn');
            const previewContainer = document.getElementById('preview-container');
            const downloadBtn = document.getElementById('download-btn');
            const imageInfo = document.getElementById('image-info');
            const loadingOverlay = document.getElementById('loading-overlay');

            // Variables to store image data
            let originalImage = null;
            let originalWidth = 0;
            let originalHeight = 0;
            let aspectRatio = 0;
            let resizedImage = null;

            // Event listeners for upload
            uploadContainer.addEventListener('click', () => {
                fileInput.click();
            });

            uploadContainer.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadContainer.classList.add('active');
            });

            uploadContainer.addEventListener('dragleave', () => {
                uploadContainer.classList.remove('active');
            });

            uploadContainer.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadContainer.classList.remove('active');
                
                if (e.dataTransfer.files.length) {
                    handleFile(e.dataTransfer.files[0]);
                }
            });

            fileInput.addEventListener('change', () => {
                if (fileInput.files.length) {
                    handleFile(fileInput.files[0]);
                }
            });

            // Handle file upload
            function handleFile(file) {
                if (!file.type.match('image.*')) {
                    alert('Please select an image file.');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    const img = new Image();
                    img.onload = function() {
                        originalImage = img;
                        originalWidth = img.width;
                        originalHeight = img.height;
                        aspectRatio = originalWidth / originalHeight;

                        // Update preview
                        previewContainer.innerHTML = '';
                        previewContainer.appendChild(img);
                        img.classList.add('max-w-full', 'max-h-64', 'mx-auto');

                        // Update inputs
                        widthInput.value = originalWidth;
                        heightInput.value = originalHeight;

                        // Update info
                        updateImageInfo(originalWidth, originalHeight, file.size);

                        // Enable resize button
                        resizeBtn.disabled = false;
                    };
                    img.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }

            // Maintain aspect ratio
            widthInput.addEventListener('input', () => {
                if (maintainAspect.checked && originalImage) {
                    const newWidth = parseInt(widthInput.value) || 0;
                    heightInput.value = Math.round(newWidth / aspectRatio);
                }
            });

            heightInput.addEventListener('input', () => {
                if (maintainAspect.checked && originalImage) {
                    const newHeight = parseInt(heightInput.value) || 0;
                    widthInput.value = Math.round(newHeight * aspectRatio);
                }
            });

            // Resize functionality
            resizeBtn.addEventListener('click', () => {
                if (!originalImage) return;

                const newWidth = parseInt(widthInput.value) || 0;
                const newHeight = parseInt(heightInput.value) || 0;

                if (newWidth <= 0 || newHeight <= 0) {
                    alert('Please enter valid dimensions.');
                    return;
                }

                loadingOverlay.classList.remove('hidden');

                setTimeout(() => {
                    // Create canvas to resize the image
                    const canvas = document.createElement('canvas');
                    canvas.width = newWidth;
                    canvas.height = newHeight;
                    const ctx = canvas.getContext('2d');
                    
                    // Draw image with smooth interpolation
                    ctx.imageSmoothingEnabled = true;
                    ctx.imageSmoothingQuality = 'high';
                    ctx.drawImage(originalImage, 0, 0, newWidth, newHeight);
                    
                    // Get the resized image
                    const resizedDataUrl = canvas.toDataURL('image/png');
                    
                    // Update preview
                    previewContainer.innerHTML = '';
                    const resizedImg = new Image();
                    resizedImg.onload = function() {
                        resizedImage = resizedImg;
                        previewContainer.appendChild(resizedImg);
                        resizedImg.classList.add('max-w-full', 'max-h-64', 'mx-auto');
                        
                        // Calculate file size (approximate)
                        const fileSizeInBytes = Math.round(resizedDataUrl.length * 0.75);
                        updateImageInfo(newWidth, newHeight, fileSizeInBytes);
                        
                        // Enable download button
                        downloadBtn.disabled = false;
                        loadingOverlay.classList.add('hidden');
                    };
                    resizedImg.src = resizedDataUrl;
                }, 500); // Small delay for loading effect
            });

            // Download functionality
            downloadBtn.addEventListener('click', () => {
                if (!resizedImage) return;
                
                const canvas = document.createElement('canvas');
                canvas.width = parseInt(widthInput.value) || 0;
                canvas.height = parseInt(heightInput.value) || 0;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);
                
                // Create download link
                const link = document.createElement('a');
                link.download = 'resized_image.png';
                link.href = canvas.toDataURL('image/png');
                link.click();
            });

            // Helper function to update image info
            function updateImageInfo(width, height, size) {
                const sizeInKB = Math.round(size / 1024);
                const sizeText = sizeInKB > 1024 ? `${(sizeInKB / 1024).toFixed(2)} MB` : `${sizeInKB} KB`;
                imageInfo.textContent = `${width} Ã ${height} px | ${sizeText}`;
            }
        });
    </script>
</body>
</html>
